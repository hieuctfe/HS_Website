@model IEnumerable<ReadCommentViewModels>
@{
    ViewBag.Title = "Bình luận";

    int length = Model.Count(),
        totalPages = ViewBag.TotalPages;

    var routeValues = new RouteValueDictionary
    {
        ["SortField"] = ViewBag.SortField,
        ["PageIndex"] = ViewBag.PageIndex,
        ["PageSize"] = ViewBag.PageSize,
        ["SearchValue"] = ViewBag.SearchValue,
    };

    string defaultQueryString = Html.BuildQueryString(routeValues),
            action = ViewContext.RouteData.Values["action"].ToString(),
            controller = ViewContext.RouteData.Values["controller"].ToString();
}

@section CustomStyles
{
    <link href="@Url.AppVendors("perfect-scrollbar-1.4.0/css/perfect-scrollbar.css")" rel="stylesheet" />
    <link href="@Url.AppVendors("bootstrap-select/bootstrap-select.min.css")" rel="stylesheet" />
    <link href="@Url.AppCustoms("css/switchBtn.css")" rel="stylesheet" />
    <style>
        .table-responsive thead > tr > th {
            white-space: nowrap;
            vertical-align: unset;
            text-align: center;
        }

        .table-responsive tbody > tr {
            white-space: nowrap;
        }

            .table-responsive tbody > tr > td:nth-child(4) {
                text-align: left;
            }

            .table-responsive tbody > tr > td:nth-child(5) {
                white-space: normal;
                min-width: 400px;
            }

        .table-responsive {
            position: relative;
        }
    </style>
}

@section CustomScripts
{
    <script src="@Url.AppVendors("perfect-scrollbar-1.4.0/dist/perfect-scrollbar.js")"></script>
    <script src="@Url.AppVendors("sweetalert/sweetalert.min.js")"></script>
    <script src="@Url.AppVendors("bootstrap-select/bootstrap-select.min.js")"></script>
    <!--CheckBoxFunction-->
    <script src="@Url.AppCustoms("js/checkbox-mylib.js")"></script>

    <script type="text/javascript">
        var $table = $('#show-table');
        var $tbody = $table.children('tbody');
        var $btnDeleteMany = $('#btnDeleteMany');
        var routeValues = $tbody.attr('data-routeValues');
        var $type = $('select[name=typeId]');

        var $multiChecknoxesModule = MyLib.Ui.MultiCheckBoxes({
            checkboxAllSelector: '#checkbox_all',
            checkboxListSelector: '#show-table tbody tr td:first-child'
        });

        $multiChecknoxesModule.init();

        function deleteRecord(sendData, currentNumberOfRows) {
            if (sendData.ids.length == 0) {
                swal('', 'Lựa Chọn Ít Nhất Một Sản Phẩm Để Thực Hiện Thao Tác Này', 'warning');
            } else {
                $.ajax({
                    url: '@Url.Action("Delete")',
                    method: 'POST',
                    dataType: 'json',
                    data: sendData
                    }).done(function () {
                        swal(
                            'Đã Xóa!',
                            'Dữ Liệu Đã Được Xóa Khỏi Danh Sách.',
                            'success'
                        ).then(() => {
                            var pattern = /pageindex=(\d+)/i;
                            if ($tbody.attr('data-numberOfRows') == currentNumberOfRows) {
                                var pageIndex = routeValues.match(pattern)[1];

                                if (pageIndex > 1) {
                                    routeValues = routeValues.replace(pattern, `PageIndex=${pageIndex - 1}`);
                                }
                            }
                            window.location = `@Url.Action("Index")?${routeValues}`;
                        });
                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    swal(
                        'Lỗi!',
                        errorThrown,
                        'error'
                    );
                });
            }
        }

        $btnDeleteMany.on('click', function () {
            swal({
                title: 'Bạn có chắc không?',
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Có',
                cancelButtonText: 'Không'
            }).then((result) => {
                if (result.value) {
                    deleteRecord({
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                        ids: $multiChecknoxesModule.getSelectedItemValues(),
                    }, $multiChecknoxesModule.getSelectedItemValues().length);
                }
            });
        });

        $table.find('tbody').on('click', '.deleteButton', function (event) {
            var $deleteBtn = $(this);
            swal({
                title: 'Bạn có chắc không?',
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Có',
                cancelButtonText: 'Không'
            }).then((result) => {
                if (result.value) {
                    deleteRecord({
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                        ids: $deleteBtn.attr('data-id'),
                    }, 1);
                }
            });
        });

        $table.find('tbody').on('click', '.deleteButton', function (event) {
            var $deleteBtn = $(this);
            swal({
                title: 'Bạn có chắc không?',
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Có',
                cancelButtonText: 'Không'
            }).then((result) => {
                if (result.value) {
                    deleteRecord({
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                        ids: $deleteBtn.attr('data-id'),
                    }, 1);
                }
            });
        });

        $table.find('tbody').on('click', '.displayButton', function (event) {
            var $displayButton = $(this);
            $.ajax({
                url: '@Url.Action("Display")',
                method: 'GET',
                dataType: 'json',
                data: {
                    id: $displayButton.attr('data-id')
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                swal(
                    'Lỗi!',
                    errorThrown,
                    'error'
                );
            });
        });

        var container = new PerfectScrollbar('.table-responsive', {
            wheelPropagation: true
        });

        $type.on('change', function () {
            var $this = $(this);
            $this.closest('form').submit();
        })
    </script>
}

<div class="card">
    <div class="card-body">
        <h4 class="card-title">Danh sách bình luận</h4>
        <div class="row m-t-10">
            @using (Html.BeginForm(action, controller, FormMethod.Get, new { @class = "col-4" }))
            {
                <div class="input-group">
                    @Html.DropDownList("typeId", new List<SelectListItem>
                    {
                        new SelectListItem { Text = "Nothing Selected", Value = "0" },
                        new SelectListItem { Text = "Dự Án", Value = "1", Selected = 1 == ViewBag.SearchValue },
                        new SelectListItem { Text = "Bài Viết", Value = "2", Selected = 2    == ViewBag.SearchValue },
                    }, new
                    {
                        @class = "selectpicker",
                        id = "typeId"
                    })
                </div>
                @Html.HiddenFor(x => x.FirstOrDefault().SortField)
                @Html.HiddenFor(x => x.FirstOrDefault().PageSize)
            }
            <div class="col-8">
                <button id="btnDeleteMany" class="btn btn-danger waves-effect waves-light mr-2 float-right">
                    <i class="fas fa-trash"></i> <span class="hidden-sm-down">Xóa</span>
                </button>
            </div>
        </div>
        @if (length == 0)
        {
            <div class="m-t-40 text-center"><h2>Không Có Dữ Liệu Phù Hợp</h2></div>
        }
        else
        {
            <nav>
                @{
                    if (ViewBag.TotalPages > 1)
                    {
                        routeValues["PageSize"] = ViewBag.PageSize;
                        routeValues["SortField"] = ViewBag.SortField;
                        Html.RenderAction("RenderPaging", "SiteAdmin",
                                    new
                                    {
                                        pageView = new _PageView
                                        {
                                            Action = action,
                                            Controller = controller,
                                            PageIndex = ViewBag.PageIndex,
                                            TotalPage = ViewBag.TotalPages,
                                            ShowPage = 7,
                                            RouteValues = routeValues
                                        }
                                    });
                    }
                }
            </nav>
            <div class="table-responsive">
                <table id="show-table" class="table m-t-30 table-hover" data-paging="true">
                    <thead>
                        <tr>
                            @{ var model = new Comment(); }
                            <th class="p-b-5">
                                <input id="checkbox_all" class="chk-col-light-green" type="checkbox">
                                <label for="checkbox_all">Tất Cả</label>
                            </th>
                            <th>@Html.BuildSortFieldFor(x => model.Owner, nameof(model), ViewBag.SortField as string, action, controller, routeValues, null)</th>
                            <th>@Html.BuildSortFieldFor(x => model.EmailAddress, nameof(model), ViewBag.SortField as string, action, controller, routeValues, null)</th>
                            <th>@Html.BuildSortFieldFor(x => model.Rating, nameof(model), ViewBag.SortField as string, action, controller, routeValues, null)</th>
                            <th>@Html.BuildSortFieldFor(x => model.Description, nameof(model), ViewBag.SortField as string, action, controller, routeValues, null)</th>
                            <th>@Html.BuildSortFieldFor(x => model.CreatedOn, nameof(model), ViewBag.SortField as string, action, controller, routeValues, null)</th>
                            <th>@Html.BuildSortFieldFor(x => model.PropertyId, nameof(model), ViewBag.SortField as string, action, controller, routeValues, null)</th>
                            <th>Xác Nhận</th>
                        </tr>
                    </thead>
                    <tbody data-routeValues="@defaultQueryString" data-numberOfRows="@length">
                        @for (int i = 0; i < length; i++)
                        {
                            int selector = (ViewBag.PageIndex - 1) * (ViewBag.PageSize);
                            <tr>
                                <td>
                                    <input value="@Model.ElementAt(i).Id" id="checkbox_@(selector + i + 1)" class="filled-in chk-col-light-blue" type="checkbox">
                                    <label class="" for="checkbox_@(selector + i + 1)">@(selector + i + 1)</label>
                                </td>
                                <td>
                                    @Model.ElementAt(i).Owner.MaxLength()
                                </td>
                                <td>
                                    @Html.DisplayFor(x => Model.ElementAt(i).EmailAddress)
                                </td>
                                <td>
                                    @for (int j = 0; j < 5; j++)
                                    {
                                        if (j < Model.ElementAt(i).Rating)
                                        {
                                            <i style="color:darkorange" class="mdi mdi-star"></i>
                                        }
                                        else
                                        {
                                            <i class="mdi mdi-star"></i>
                                        }

                                    }
                                </td>
                                <td>@Model.ElementAt(i).Content</td>
                                <td>@Model.ElementAt(i).CreatedOn.ToString("dd/MM/yyyy")</td>
                                <td>
                                    <a href="@Model.ElementAt(i).UrlLinked" target="_blank">Open in new tab</a>
                                </td>
                                <td>
                                    <button data-id="@Model.ElementAt(i).Id" type="button"
                                            class="btn btn-secondary displayButton btn-toggle @(Model.ElementAt(i).IsVerify ? "active" : string.Empty)"
                                            data-toggle="button" aria-pressed="@Model.ElementAt(i).IsVerify" autocomplete="off">
                                        <div class="handle"></div>
                                    </button>
                                    <button data-id="@Model.ElementAt(i).Id" class="btn waves-effect waves-light btn-danger deleteButton" data-toggle="tooltip" data-original-title="Xóa" type="button">
                                        <i class="mdi mdi-delete m-t-10"></i>
                                        <span class="hidden-md-down"></span>
                                    </button>
                                </td>
                            </tr>
                        }
                </table>
            </div>
            <nav>
                @{
                    if (ViewBag.TotalPages > 1)
                    {
                        routeValues["PageSize"] = ViewBag.PageSize;
                        routeValues["SortField"] = ViewBag.SortField;
                        Html.RenderAction("RenderPaging", "SiteAdmin",
                                    new
                                    {
                                        pageView = new _PageView
                                        {
                                            Action = action,
                                            Controller = controller,
                                            PageIndex = ViewBag.PageIndex,
                                            TotalPage = ViewBag.TotalPages,
                                            ShowPage = 7,
                                            RouteValues = routeValues
                                        }
                                    });
                    }
                }
            </nav>
        }
    </div>
</div>
@Html.AntiForgeryToken()